Config:
  PIDFile: /tmp/cryptoexch.pid

Tasks:
  # - Api: trading/stats
  #   Module: BitBay
  #   Format: csv
  #   # %$ - will be replace by consequtive counter
  #   # other %* marks will go thru chrono::format function, see:
  #   # https://docs.rs/chrono/0.4.13/chrono/format/strftime/index.html#specifiers
  #   # OutPathMask: samples/stats_ETH_%$.csv
  #   OutPathMask: samples/stats_ETH_%$_%s.csv
  #   StopAfter: 2
  #   Frequency: 3
  #   NewFileAfter: 3
  #   Filters:
  #     - - items
  #       - rhai
  #       - |
  #         if key.contains("ETH") { return true; }
  #         if val.h == () || val.l == () { return false; }
  #         let h = val.h.to_float();
  #         let l = val.l.to_float();
  #         if h == 0.0 || l == 0.0 { return false; }
  #         (h - l) / h > 0.1
        # - |
        #   val["v"].to_float() > 0.0
        # - |
        #   val["m"].contains("ETH")
        # - |
        #   val["m"] == "AMLT-PLN"
      # - ["items", "by_key_re", ".*ETH.*"]
      # - ["items", "by_key", "ETH-PLN"]
  # - Api: trading/stats
  #   Module: BitBay
  #   PathParams: ETH-PLN
  #   Format: csv
  #   OutPathMask: samples/stats_ETH_PLN.csv
  #   StopAfter: 1
  # - Api: trading/ticker
  #   Module: BitBay
  #   PathParam: ETH-PLN
  #   Format: csv
  #   OutPathMask: samples/ticker_ETH_PLN.csv
  #   StopAfter: 1
  # - Api: trading/ticker
  #   Module: BitBay
  #   Format: csv
  #   # Format: pb_proto
  #   # Format: pb
  #   # Format: json_pretty
  #   OutPathMask: samples/ticker_ETH_%s.csv
  #   # OutPathMask: samples/ticker.proto
  #   # OutPathMask: samples/ticker_ETH_%s.pb3
  #   # OutPathMask: samples/ticker_ETH_%c.json
  #   StopAfter: 4
  #   Frequency: 4
  #   NewFileAfter: 2
  #   Filters:
  #     - ["items", "by_key_re", ".*ETH.*"]
  # - Api: https://api.bitbay.net/rest/trading/stats
  #   Module: GenericJson
  #   Format: json_pretty
  #   OutPathMask: samples/stats_all_in.json
  #   StopAfter: 1
  # - Api: https://api.bitbay.net/rest/trading/stats/ETH-PLN
  #   Module: GenericJson
  #   Format: json_pretty
  #   OutPathMask: samples/stats_ETH_PLN_in.json
  #   StopAfter: 1
  - Api: trading/orderbook-limited
    Module: BitBay
    PathParams: ETH-PLN/10
    # Format: pb
    # OutPathMask: samples/orderbook_%$.pb3
    # Format: json_pretty
    # OutPathMask: samples/orderbook_%$.json
    Format: csv
    OutPathMask: samples/orderbook_10.csv
    Frequency: 2
    StopAfter: 2
  # - Api: https://api.bitbay.net/rest/trading/ticker
  #   Module: GenericJson
  #   Format: json_pretty
  #   OutPathMask: samples/ticker_all_%$.json
  #   StopAfter: 1
  #   # Frequency: 4
  #   # NewFileAfter: 2
  #   Filters:
  #     - - buy
  #       - rhai
  #       - |
  #         let ca = val.ca.to_float();
  #         ca >= 7.0
  #     - - sell
  #       - rhai
  #       - |
  #         let ca = val.ca.to_float();
  #         ca >= 7.0
  #   # Filters:
  #   #   - ["items", "by_key_re", ".*ETH.*"]
    
