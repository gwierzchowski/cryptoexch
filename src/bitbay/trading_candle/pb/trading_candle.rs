// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `trading_candle.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct Candles {
    // message fields
    pub candles: ::protobuf::RepeatedField<Candles_Candle>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Candles {
    fn default() -> &'a Candles {
        <Candles as ::protobuf::Message>::default_instance()
    }
}

impl Candles {
    pub fn new() -> Candles {
        ::std::default::Default::default()
    }

    // repeated .Candles.Candle candles = 1;


    pub fn get_candles(&self) -> &[Candles_Candle] {
        &self.candles
    }
    pub fn clear_candles(&mut self) {
        self.candles.clear();
    }

    // Param is passed by value, moved
    pub fn set_candles(&mut self, v: ::protobuf::RepeatedField<Candles_Candle>) {
        self.candles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_candles(&mut self) -> &mut ::protobuf::RepeatedField<Candles_Candle> {
        &mut self.candles
    }

    // Take field
    pub fn take_candles(&mut self) -> ::protobuf::RepeatedField<Candles_Candle> {
        ::std::mem::replace(&mut self.candles, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Candles {
    fn is_initialized(&self) -> bool {
        for v in &self.candles {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.candles)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.candles {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.candles {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Candles {
        Candles::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Candles_Candle>>(
                "candles",
                |m: &Candles| { &m.candles },
                |m: &mut Candles| { &mut m.candles },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Candles>(
                "Candles",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Candles {
        static instance: ::protobuf::rt::LazyV2<Candles> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Candles::new)
    }
}

impl ::protobuf::Clear for Candles {
    fn clear(&mut self) {
        self.candles.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Candles {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Candles {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Candles_Candle {
    // message fields
    pub timestamp: u64,
    pub open: f32,
    pub close: f32,
    pub high: f32,
    pub low: f32,
    pub vol: f32,
    pub count: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Candles_Candle {
    fn default() -> &'a Candles_Candle {
        <Candles_Candle as ::protobuf::Message>::default_instance()
    }
}

impl Candles_Candle {
    pub fn new() -> Candles_Candle {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // float open = 2;


    pub fn get_open(&self) -> f32 {
        self.open
    }
    pub fn clear_open(&mut self) {
        self.open = 0.;
    }

    // Param is passed by value, moved
    pub fn set_open(&mut self, v: f32) {
        self.open = v;
    }

    // float close = 3;


    pub fn get_close(&self) -> f32 {
        self.close
    }
    pub fn clear_close(&mut self) {
        self.close = 0.;
    }

    // Param is passed by value, moved
    pub fn set_close(&mut self, v: f32) {
        self.close = v;
    }

    // float high = 4;


    pub fn get_high(&self) -> f32 {
        self.high
    }
    pub fn clear_high(&mut self) {
        self.high = 0.;
    }

    // Param is passed by value, moved
    pub fn set_high(&mut self, v: f32) {
        self.high = v;
    }

    // float low = 5;


    pub fn get_low(&self) -> f32 {
        self.low
    }
    pub fn clear_low(&mut self) {
        self.low = 0.;
    }

    // Param is passed by value, moved
    pub fn set_low(&mut self, v: f32) {
        self.low = v;
    }

    // float vol = 6;


    pub fn get_vol(&self) -> f32 {
        self.vol
    }
    pub fn clear_vol(&mut self) {
        self.vol = 0.;
    }

    // Param is passed by value, moved
    pub fn set_vol(&mut self, v: f32) {
        self.vol = v;
    }

    // uint32 count = 7;


    pub fn get_count(&self) -> u32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = v;
    }
}

impl ::protobuf::Message for Candles_Candle {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.open = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.close = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.high = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.low = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.vol = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.open != 0. {
            my_size += 5;
        }
        if self.close != 0. {
            my_size += 5;
        }
        if self.high != 0. {
            my_size += 5;
        }
        if self.low != 0. {
            my_size += 5;
        }
        if self.vol != 0. {
            my_size += 5;
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(7, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if self.open != 0. {
            os.write_float(2, self.open)?;
        }
        if self.close != 0. {
            os.write_float(3, self.close)?;
        }
        if self.high != 0. {
            os.write_float(4, self.high)?;
        }
        if self.low != 0. {
            os.write_float(5, self.low)?;
        }
        if self.vol != 0. {
            os.write_float(6, self.vol)?;
        }
        if self.count != 0 {
            os.write_uint32(7, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Candles_Candle {
        Candles_Candle::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &Candles_Candle| { &m.timestamp },
                |m: &mut Candles_Candle| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "open",
                |m: &Candles_Candle| { &m.open },
                |m: &mut Candles_Candle| { &mut m.open },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "close",
                |m: &Candles_Candle| { &m.close },
                |m: &mut Candles_Candle| { &mut m.close },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "high",
                |m: &Candles_Candle| { &m.high },
                |m: &mut Candles_Candle| { &mut m.high },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "low",
                |m: &Candles_Candle| { &m.low },
                |m: &mut Candles_Candle| { &mut m.low },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "vol",
                |m: &Candles_Candle| { &m.vol },
                |m: &mut Candles_Candle| { &mut m.vol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "count",
                |m: &Candles_Candle| { &m.count },
                |m: &mut Candles_Candle| { &mut m.count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Candles_Candle>(
                "Candles.Candle",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Candles_Candle {
        static instance: ::protobuf::rt::LazyV2<Candles_Candle> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Candles_Candle::new)
    }
}

impl ::protobuf::Clear for Candles_Candle {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.open = 0.;
        self.close = 0.;
        self.high = 0.;
        self.low = 0.;
        self.vol = 0.;
        self.count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Candles_Candle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Candles_Candle {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14trading_candle.proto\x12\0\"\xb0\x01\n\x07Candles\x12\"\n\x07candl\
    es\x18\x01\x20\x03(\x0b2\x0f.Candles.CandleB\0\x1a\x7f\n\x06Candle\x12\
    \x13\n\ttimestamp\x18\x01\x20\x01(\x04B\0\x12\x0e\n\x04open\x18\x02\x20\
    \x01(\x02B\0\x12\x0f\n\x05close\x18\x03\x20\x01(\x02B\0\x12\x0e\n\x04hig\
    h\x18\x04\x20\x01(\x02B\0\x12\r\n\x03low\x18\x05\x20\x01(\x02B\0\x12\r\n\
    \x03vol\x18\x06\x20\x01(\x02B\0\x12\x0f\n\x05count\x18\x07\x20\x01(\rB\0\
    :\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
