// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `trading_orderbook.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct OrderBooks {
    // message fields
    pub orders: ::protobuf::RepeatedField<OrderBooks_Order>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrderBooks {
    fn default() -> &'a OrderBooks {
        <OrderBooks as ::protobuf::Message>::default_instance()
    }
}

impl OrderBooks {
    pub fn new() -> OrderBooks {
        ::std::default::Default::default()
    }

    // repeated .OrderBooks.Order orders = 1;


    pub fn get_orders(&self) -> &[OrderBooks_Order] {
        &self.orders
    }
    pub fn clear_orders(&mut self) {
        self.orders.clear();
    }

    // Param is passed by value, moved
    pub fn set_orders(&mut self, v: ::protobuf::RepeatedField<OrderBooks_Order>) {
        self.orders = v;
    }

    // Mutable pointer to the field.
    pub fn mut_orders(&mut self) -> &mut ::protobuf::RepeatedField<OrderBooks_Order> {
        &mut self.orders
    }

    // Take field
    pub fn take_orders(&mut self) -> ::protobuf::RepeatedField<OrderBooks_Order> {
        ::std::mem::replace(&mut self.orders, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OrderBooks {
    fn is_initialized(&self) -> bool {
        for v in &self.orders {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.orders)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.orders {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.orders {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrderBooks {
        OrderBooks::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OrderBooks_Order>>(
                "orders",
                |m: &OrderBooks| { &m.orders },
                |m: &mut OrderBooks| { &mut m.orders },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OrderBooks>(
                "OrderBooks",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OrderBooks {
        static instance: ::protobuf::rt::LazyV2<OrderBooks> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OrderBooks::new)
    }
}

impl ::protobuf::Clear for OrderBooks {
    fn clear(&mut self) {
        self.orders.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrderBooks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrderBooks {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OrderBooks_Order {
    // message fields
    pub timestamp: u64,
    pub otype: OrderBooks_Order_OrderType,
    pub count: u32,
    pub rate: f32,
    pub curr_amt: f32,
    pub prev_amt: f32,
    pub start_amt: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrderBooks_Order {
    fn default() -> &'a OrderBooks_Order {
        <OrderBooks_Order as ::protobuf::Message>::default_instance()
    }
}

impl OrderBooks_Order {
    pub fn new() -> OrderBooks_Order {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // .OrderBooks.Order.OrderType otype = 2;


    pub fn get_otype(&self) -> OrderBooks_Order_OrderType {
        self.otype
    }
    pub fn clear_otype(&mut self) {
        self.otype = OrderBooks_Order_OrderType::BYE;
    }

    // Param is passed by value, moved
    pub fn set_otype(&mut self, v: OrderBooks_Order_OrderType) {
        self.otype = v;
    }

    // uint32 count = 3;


    pub fn get_count(&self) -> u32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = v;
    }

    // float rate = 4;


    pub fn get_rate(&self) -> f32 {
        self.rate
    }
    pub fn clear_rate(&mut self) {
        self.rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rate(&mut self, v: f32) {
        self.rate = v;
    }

    // float curr_amt = 5;


    pub fn get_curr_amt(&self) -> f32 {
        self.curr_amt
    }
    pub fn clear_curr_amt(&mut self) {
        self.curr_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_curr_amt(&mut self, v: f32) {
        self.curr_amt = v;
    }

    // float prev_amt = 6;


    pub fn get_prev_amt(&self) -> f32 {
        self.prev_amt
    }
    pub fn clear_prev_amt(&mut self) {
        self.prev_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_prev_amt(&mut self, v: f32) {
        self.prev_amt = v;
    }

    // float start_amt = 7;


    pub fn get_start_amt(&self) -> f32 {
        self.start_amt
    }
    pub fn clear_start_amt(&mut self) {
        self.start_amt = 0.;
    }

    // Param is passed by value, moved
    pub fn set_start_amt(&mut self, v: f32) {
        self.start_amt = v;
    }
}

impl ::protobuf::Message for OrderBooks_Order {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.otype, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.rate = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.curr_amt = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.prev_amt = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.start_amt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.otype != OrderBooks_Order_OrderType::BYE {
            my_size += ::protobuf::rt::enum_size(2, self.otype);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rate != 0. {
            my_size += 5;
        }
        if self.curr_amt != 0. {
            my_size += 5;
        }
        if self.prev_amt != 0. {
            my_size += 5;
        }
        if self.start_amt != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if self.otype != OrderBooks_Order_OrderType::BYE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.otype))?;
        }
        if self.count != 0 {
            os.write_uint32(3, self.count)?;
        }
        if self.rate != 0. {
            os.write_float(4, self.rate)?;
        }
        if self.curr_amt != 0. {
            os.write_float(5, self.curr_amt)?;
        }
        if self.prev_amt != 0. {
            os.write_float(6, self.prev_amt)?;
        }
        if self.start_amt != 0. {
            os.write_float(7, self.start_amt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrderBooks_Order {
        OrderBooks_Order::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &OrderBooks_Order| { &m.timestamp },
                |m: &mut OrderBooks_Order| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OrderBooks_Order_OrderType>>(
                "otype",
                |m: &OrderBooks_Order| { &m.otype },
                |m: &mut OrderBooks_Order| { &mut m.otype },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "count",
                |m: &OrderBooks_Order| { &m.count },
                |m: &mut OrderBooks_Order| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "rate",
                |m: &OrderBooks_Order| { &m.rate },
                |m: &mut OrderBooks_Order| { &mut m.rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "curr_amt",
                |m: &OrderBooks_Order| { &m.curr_amt },
                |m: &mut OrderBooks_Order| { &mut m.curr_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "prev_amt",
                |m: &OrderBooks_Order| { &m.prev_amt },
                |m: &mut OrderBooks_Order| { &mut m.prev_amt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "start_amt",
                |m: &OrderBooks_Order| { &m.start_amt },
                |m: &mut OrderBooks_Order| { &mut m.start_amt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OrderBooks_Order>(
                "OrderBooks.Order",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OrderBooks_Order {
        static instance: ::protobuf::rt::LazyV2<OrderBooks_Order> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OrderBooks_Order::new)
    }
}

impl ::protobuf::Clear for OrderBooks_Order {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.otype = OrderBooks_Order_OrderType::BYE;
        self.count = 0;
        self.rate = 0.;
        self.curr_amt = 0.;
        self.prev_amt = 0.;
        self.start_amt = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrderBooks_Order {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrderBooks_Order {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OrderBooks_Order_OrderType {
    BYE = 0,
    SELL = 1,
}

impl ::protobuf::ProtobufEnum for OrderBooks_Order_OrderType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OrderBooks_Order_OrderType> {
        match value {
            0 => ::std::option::Option::Some(OrderBooks_Order_OrderType::BYE),
            1 => ::std::option::Option::Some(OrderBooks_Order_OrderType::SELL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OrderBooks_Order_OrderType] = &[
            OrderBooks_Order_OrderType::BYE,
            OrderBooks_Order_OrderType::SELL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OrderBooks_Order_OrderType>("OrderBooks.Order.OrderType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OrderBooks_Order_OrderType {
}

impl ::std::default::Default for OrderBooks_Order_OrderType {
    fn default() -> Self {
        OrderBooks_Order_OrderType::BYE
    }
}

impl ::protobuf::reflect::ProtobufValue for OrderBooks_Order_OrderType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17trading_orderbook.proto\x12\0\"\x82\x02\n\nOrderBooks\x12#\n\x06or\
    ders\x18\x01\x20\x03(\x0b2\x11.OrderBooks.OrderB\0\x1a\xcc\x01\n\x05Orde\
    r\x12\x13\n\ttimestamp\x18\x01\x20\x01(\x04B\0\x12,\n\x05otype\x18\x02\
    \x20\x01(\x0e2\x1b.OrderBooks.Order.OrderTypeB\0\x12\x0f\n\x05count\x18\
    \x03\x20\x01(\rB\0\x12\x0e\n\x04rate\x18\x04\x20\x01(\x02B\0\x12\x12\n\
    \x08curr_amt\x18\x05\x20\x01(\x02B\0\x12\x12\n\x08prev_amt\x18\x06\x20\
    \x01(\x02B\0\x12\x13\n\tstart_amt\x18\x07\x20\x01(\x02B\0\"\x20\n\tOrder\
    Type\x12\x07\n\x03BYE\x10\0\x12\x08\n\x04SELL\x10\x01\x1a\0:\0:\0B\0b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
